name: PufferPanel

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

concurrency:
  group: pufferpanel
  cancel-in-progress: true

jobs:
  pufferpanel:
    runs-on: ubuntu-latest
    timeout-minutes: 355
    env:
      BACKUP_PREFIX: pufferpanel
      BACKUP_SPLIT_SIZE: 90M
      BACKUP_DIR: pufferpanel
    steps:

      - name: Checkout repository (full history & push creds)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git author (used for commits)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure Docker & Docker Compose are available
        run: |
          set -euo pipefail
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker missing: installing (this may take a while)..."
            curl -fsSL https://get.docker.com | sh
          fi
          if ! docker compose version >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin || true
          fi
          echo "Docker and compose available:"
          docker --version || true
          docker compose version || true

      - name: Restore latest backup parts from origin/main (if present)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          git fetch --no-tags origin main
          REMOTE_PARTS=$(git ls-tree -r --name-only origin/main | grep '^pufferpanel_.*\.tar\.gz\.part-' || true)
          if [ -n "$REMOTE_PARTS" ]; then
            echo "Found previous backup parts in origin/main. Checking them out..."
            git checkout origin/main -- ${REMOTE_PARTS} || true
            PARTS=(pufferpanel_*.tar.gz.part-*)
            if [ ${#PARTS[@]} -gt 0 ]; then
              echo "Joining ${#PARTS[@]} parts into pufferpanel.tar.gz..."
              cat "${PARTS[@]}" > pufferpanel.tar.gz
              mkdir -p "${BACKUP_DIR}"
              echo "Extracting backup..."
              sudo tar -xzf pufferpanel.tar.gz -C .
              echo "Restored ${BACKUP_DIR} contents:"
              ls -l "${BACKUP_DIR}" || true
            else
              echo "No part files found locally after checkout."
            fi
          else
            echo "No previous backup parts found on origin/main â€” starting fresh."
          fi

      - name: Ensure ownership for backup & runtime
        run: |
          sudo chown -R $(id -u):$(id -g) "${BACKUP_DIR}" || true

      - name: Start Playitgg Container
        run: |
          docker-compose up -d

      - name: Create docker-compose for PufferPanel
        run: |
          mkdir -p pufferpanel
          cat > pufferpanel/docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            pufferpanel:
              image: pufferpanel/pufferpanel:latest
              container_name: pufferpanel
              restart: unless-stopped
              ports:
                - "8080:8080"
                - "5657:5657"
              volumes:
                - ./config:/etc/pufferpanel
                - ./data:/var/lib/pufferpanel
              environment:
                PUFFER_ADMIN_EMAIL: "admin@example.com"
          EOF

      - name: Start PufferPanel (container)
        run: |
          cd pufferpanel
          docker compose up -d

      - name: Wait for PufferPanel HTTP to become healthy (timeout ~2 minutes)
        run: |
          set -euo pipefail
          MAX_WAIT=120
          for i in $(seq 1 $MAX_WAIT); do
            if curl -sSf http://localhost:8080/ >/dev/null 2>&1; then
              echo "PufferPanel is responding on http://localhost:8080"
              break
            fi
            echo "Waiting for PufferPanel... ($i/$MAX_WAIT)"
            sleep 2
          done

      - name: Create Admin user (idempotent)
        run: |
          docker exec pufferpanel /pufferpanel/pufferpanel user add \
            --name kshosting \
            --email kshosting@ksmail.com \
            --password 'kshosting@55' \
            --admin || true

      - name: Sleep (keep container alive)
        if: ${{ always() }}
        run: |
          sleep 20000

      - name: Tear down containers (clean runner)
        if: ${{ always() }}
        run: |
          cd pufferpanel || true
          docker compose down || true

      - name: Create compressed backup and split into parts
        shell: bash
        run: |
          set -euo pipefail
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          BACKUP_NAME="${BACKUP_PREFIX}_${TIMESTAMP}.tar.gz"
          sudo chown -R $(id -u):$(id -g) "${BACKUP_DIR}" || true
          echo "Creating compressed backup stream..."
          tar -czf - "${BACKUP_DIR}" | split -b "${BACKUP_SPLIT_SIZE}" - "${BACKUP_NAME}.part-"
          ls -lh ${BACKUP_NAME}.part-* || true

      - name: Commit & push backup (guarantee a commit)
        shell: bash
        run: |
          set -euo pipefail
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          git add ${BACKUP_PREFIX}_*.tar.gz.part-* || true
          if git diff --staged --quiet; then
            git commit --allow-empty -m "Heartbeat backup: ${TIMESTAMP}" || true
          else
            git commit -m "Backup PufferPanel data (${TIMESTAMP})" || true
          fi
          if ! git push origin HEAD:main; then
            git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
            git push origin HEAD:main
          fi

      - name: Upload backup parts as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: pufferpanel-backup-${{ github.run_id }}
          path: pufferpanel_*.tar.gz.part-*

      - name: Restart Workflow
        if: ${{ always() }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: PufferPanel
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
